{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,wBCL/C,SAASC,IAetB,OAdAA,EAAWZ,OAAOa,QAAU,SAAUC,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAIjB,KAAOoB,EACVlB,OAAOM,UAAUC,eAAeC,KAAKU,EAAQpB,KAC/CgB,EAAOhB,GAAOoB,EAAOpB,GAG1B,CAED,OAAOgB,CACR,EAEMF,EAASO,MAAMC,KAAMJ,UAC7B,C,OChBD,MAAM,EAA+BK,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iC,aCKxDC,IAAAA,aAAAA,IAAqB,mBAAmB,YACtCC,EAAAA,EAAAA,QAAOC,IAAAA,UAAwB,sBAAsB,SAAUC,GAAO,aACpEA,EAAMC,IACJ,kBACAC,EAAE,cAAe,CACfA,EAAE,QAASL,IAAAA,WAAAA,MAAqB,6CAChCM,IAAAA,UACE,CACEC,QAAS,CACPC,UAAWR,IAAAA,WAAAA,MAAqB,6DAChCS,MAAOT,IAAAA,WAAAA,MAAqB,yDAC5BU,OAAQV,IAAAA,WAAAA,MAAqB,2DAE/Bb,MAAOS,KAAKe,KAAKC,UAAU,oBAAsB,YACjDC,SAAU,SAAC1B,GACK,cAAVA,IACFA,EAAQ,MAGV,EAAK2B,wBAAyB,EAE9B,IAAMC,EAAkB,CACtBC,gBAAiB7B,GAGb8B,EAAc,EAAKN,KAAKM,cAI1B,8CAA+CA,IAGjDF,EAAWE,YAAX,KACKA,EADL,CAEE,8CAA+C9B,KAInD,EAAKwB,KAAKO,KAAKH,GAAYI,MAAK,WAC9B,EAAKL,wBAAyB,EAC9BT,EAAEe,QACH,GACF,EACDC,SAAUzB,KAAKkB,wBAEjBd,IAAAA,WAAAA,MAAqB,oEAKvBG,EAAMmB,IAAI,sBAAwB1B,KAAKe,KAAKC,UAAU,oBAAtD,SAA4EhB,KAAKe,KAAKM,gBAAV,EAA0B,+CAExGd,EAAMxB,IAAI,qBAAqB4C,MAAMF,UAAW,EAEnD,GACF,G","sources":["webpack://@blomstra/digest/webpack/bootstrap","webpack://@blomstra/digest/webpack/runtime/compat get default export","webpack://@blomstra/digest/webpack/runtime/define property getters","webpack://@blomstra/digest/webpack/runtime/hasOwnProperty shorthand","webpack://@blomstra/digest/webpack/runtime/make namespace object","webpack://@blomstra/digest/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@blomstra/digest/external root \"flarum.core.compat['forum/app']\"","webpack://@blomstra/digest/external root \"flarum.core.compat['common/extend']\"","webpack://@blomstra/digest/external root \"flarum.core.compat['common/components/Select']\"","webpack://@blomstra/digest/external root \"flarum.core.compat['forum/components/SettingsPage']\"","webpack://@blomstra/digest/./src/forum/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/SettingsPage'];","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Select from 'flarum/common/components/Select';\nimport SettingsPage from 'flarum/forum/components/SettingsPage';\n\napp.initializers.add('blomstra/digest', () => {\n  extend(SettingsPage.prototype, 'notificationsItems', function (items) {\n    items.add(\n      'digestFrequency',\n      m('.Form-group', [\n        m('label', app.translator.trans('blomstra-digest.forum.settings.frequency')),\n        Select.component(\n          {\n            options: {\n              immediate: app.translator.trans('blomstra-digest.forum.settings.frequencyOptions.immediate'),\n              daily: app.translator.trans('blomstra-digest.forum.settings.frequencyOptions.daily'),\n              weekly: app.translator.trans('blomstra-digest.forum.settings.frequencyOptions.weekly'),\n            },\n            value: this.user.attribute('digestFrequency') || 'immediate',\n            onchange: (value) => {\n              if (value === 'immediate') {\n                value = null;\n              }\n\n              this.digestFrequencyLoading = true;\n\n              const attributes: any = {\n                digestFrequency: value,\n              };\n\n              const preferences = this.user.preferences();\n\n              // When enabling digest, turn \"notify for all posts\" on. We also force this in the backend but this ensures the setting looks correct immediately\n              // When disabling digest, we set \"notify for all posts\" back to off because it's the easiest implementation\n              if ('flarum-subscriptions.notify_for_all_posts' in preferences) {\n                // Mimics User::savePreferences\n                // But we do it here so we can save both the preferences and frequency with one request\n                attributes.preferences = {\n                  ...preferences,\n                  'flarum-subscriptions.notify_for_all_posts': !!value,\n                };\n              }\n\n              this.user.save(attributes).then(() => {\n                this.digestFrequencyLoading = false;\n                m.redraw();\n              });\n            },\n            disabled: this.digestFrequencyLoading,\n          },\n          app.translator.trans('flarum-subscriptions.forum.settings.follow_after_reply_label')\n        ),\n      ])\n    );\n\n    if (items.has('notifyForAllPosts') && this.user.attribute('digestFrequency') && this.user.preferences()?.['flarum-subscriptions.notify_for_all_posts']) {\n      // Show visually that flarum-subscriptions.notify_for_all_posts cannot be disabled when digest is scheduled\n      items.get('notifyForAllPosts').attrs.disabled = true;\n    }\n  });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","_extends","assign","target","i","arguments","length","source","apply","this","flarum","core","compat","app","extend","SettingsPage","items","add","m","Select","options","immediate","daily","weekly","user","attribute","onchange","digestFrequencyLoading","attributes","digestFrequency","preferences","save","then","redraw","disabled","has","attrs"],"sourceRoot":""}